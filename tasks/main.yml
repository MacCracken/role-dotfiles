#SPDX-License-Identifier: MIT-0
---
# - name: Ensure stow and git are installed
#   homebrew:
#     name:
#       - stow
#       - git
#     state: present
#   become: true

- name: Get absolute folder path for local repo destination.
  command:
    cmd: "readlink -f {{ item }}"
  with_items:
    - "{{ dotfiles_repo_local_destination }}"
    - "{{ dotfiles_home }}"
  register: absolute_readlinks
  changed_when: False

- name: Set absolute facts.
  set_fact:
    destination_abs: "{{ absolute_readlinks.results[0].stdout }}"
    target_abs: "{{ absolute_readlinks.results[1].stdout }}"
  changed_when: False

- name: Ensure dotfiles repository is cloned locally.
  git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ destination_abs }}"
    version: "{{ dotfiles_repo_version }}"
    accept_hostkey: "{{ dotfiles_repo_accept_hostkey }}"
  become: false

- name: Using stow to link folders to dotfiles_home
  stow:
    state: latest
    package: "{{ item }}"
    dir: "{{ destination_abs }}"
    target: "{{ target_abs }}"
  with_items: "{{ dotfiles_folders }}"

- name: Ensure all configured dotfiles are links.
  command: "ls -F {{ dotfiles_home }}/{{ item }}"
  register: existing_dotfile_info
  failed_when: false
  check_mode: false
  changed_when: false
  with_items: "{{ dotfiles_files }}"

- name: Remove existing dotfiles file if a replacement is being linked.
  file:
    path: "{{ dotfiles_home }}/{{ dotfiles_files[item.0] }}"
    state: absent
  when: "'@' not in item.1.stdout"
  with_indexed_items: "{{ existing_dotfile_info.results }}"

- name: Ensure parent folders of link dotfiles exist.
  file:
    path: "{{ (dotfiles_home ~ '/' ~ item) | dirname }}"
    state: directory
    follow: true
  become: false
  with_items: "{{ dotfiles_files }}"

- name: Link dotfiles into home folder.
  file:
    src: "{{ dotfiles_repo_local_destination }}/{{ item }}"
    dest: "{{ dotfiles_home }}/{{ item }}"
    state: link
    mode: 0644
  become: false
  with_items: "{{ dotfiles_files }}"